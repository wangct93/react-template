
$$wangct-container-start$$

$$wangct-filePath-start$$
config\config.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2019/3/7.
 */


export default {
  key:'615d4d4ebcee8d86ce15f3c89d814a60',
  version:'1.4.10'
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
config\formatFields.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2019/1/14.
 */

import React from 'react';
import {render} from 'react-dom';
import {getMap} from '../util';

const formatFields = {
    position:(value) => {
        const Map = getMap();
        if(value instanceof Map.LngLat){
            return value;
        }
        return value && value.length && new Map.LngLat(...value);
    },
    offset:(value) => {
        const Map = getMap();
        if(value instanceof Map.Pixel){
            return value;
        }
        return value && value.length && new Map.Pixel(...value);
    },
    content:(ReactDom) => {
        let content = ReactDom;
        if(React.isValidElement(ReactDom)){
            content = document.createElement('div');
            content.className = 'wct-infowindow-content';
            render(ReactDom,content);
        }
        return content;
    }
};

export function getFormatFieldsByTarget(target){
    return getFormatFields(target.props.formatFields);
}

export function getFormatFields(fields){
    return {
        ...formatFields,
        ...fields
    };
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
index.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/12/24.
 */



import Map from './Map';
import Overlay from './Overlay';
import InfoWindow from './InfoWindow';

export {
  Map,
  Overlay,
  InfoWindow
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
InfoWindow\index.js
$$wangct-filePath-end$$

$$wangct-content-start$$
import React,{PureComponent} from 'react';
import util,{arrayUtil,objectUtil} from '@alipay/wangct-util';
import {getMap} from '../util';
import {getFormatFieldsByTarget} from '../config/formatFields';

export default class InfoWindow extends PureComponent{
  state = {
    filterFields:['filterFields','formatFields']
  };

  componentDidMount(){
    this.update();
  }

  componentDidUpdate(){
    this.update();
  }

  componentWillUnmount(){
    this.remove();
  }

  getRealState(){
    return {
      ...this.state,
      ...this.props
    }
  }

  getOption(){
    const state = this.getRealState();
    const {filterFields = []} = state;
    const formatFields = getFormatFieldsByTarget(this);
    Object.keys(state).forEach(key => {
      if(formatFields[key]){
        state[key] = formatFields[key](state[key],state);
      }
    });
    filterFields.forEach(field => {
      delete state[field];
    });
    return state;
  }

  remove(){
    const {map} = this.getRealState();
    const {target} = this;
    if(map && target){
      map.remove(target);
    }
  }

  update(){
    this.remove();
    const {events = {},map,visible} = this.getRealState();
    if(map && visible){
      const Map = getMap();
      const target = new Map.InfoWindow(this.getOption());
      Object.keys(events).forEach(key => target.on(key,events[key]));
      util.callFunc(events.created,target);
      this.target = target;
    }
  }

  render(){
    return <React.Fragment />
  }
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
Map\index.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/11/26.
 */
import React,{PureComponent} from 'react';

import util,{stringUtil,reactUtil,objectUtil} from '@alipay/wangct-util';
import {loadMap} from '../util';
import {getFormatFields} from '../config/formatFields';
import config from '../config/config';
import './index.less';

const {getProps} = reactUtil;

export default class Map extends PureComponent{
  state = {
    key:config.key,
    version:config.version,
    filterFields:['mapKey','version','filterFields','plugins','pluginFormatFields'],
    plugins:['ToolBar','Scale'],
    features:['bg', 'road', 'building', 'point'],
    pluginFormatFields:['offset']
  };

  componentDidMount(){
    this.update();
  }

  componentDidUpdate(){
    this.update();
  }

  componentWillUnmount(){
    this.remove();
  }

  remove(){
    const {target} = this;
    if(target){
      target.destroy();
    }
  }

  update(){
    this.remove();
    const {version,key} = getProps(this);
    loadMap({version,key},(AMap) => {
      const {elem} = this;
      const map = new AMap.Map(elem,this.getOption());
      const {events = {},plugins = []} = getProps(this);
      Object.keys(events).forEach(key => {
        map.on(key,events[key]);
      });
      this.target = map;
      plugins.forEach(item => {
        if(typeof item === 'string'){
          item = {name:item};
        }
        const formatFields = this.getPluginFormatFields();
        const {callback = () => {
          const {option = {}} = item;
          Object.keys(option).forEach(key => {
            if(formatFields[key]){
              option[key] = formatFields[key](option[key],option);
            }
          });
          const toolObj = new AMap[item.name](option);
          map.addControl(toolObj);
        }} = item;
        map.plugin([`AMap.${item.name}`],callback.bind(this,map));
      });
      util.callFunc(events.created,map);
    });
  }

  getPluginFormatFields(){
    const {pluginFormatFields = []} = getProps(this);
    return objectUtil.clone(getFormatFields(),pluginFormatFields);
  }

  getOption(){
    const state = getProps(this);
    state.filterFields.forEach(field => {
      delete state[field];
    });
    return state;
  }

  render(){
    const props = getProps(this);
    return <div
      className={util.concatClassName('wct-map',props.className)}
      ref={ref => this.elem = ref}
      style={props.style}
    >
    </div>
  }
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
Map\index.less
$$wangct-filePath-end$$

$$wangct-content-start$$
@import "../style/base";

.wct-map{
    .full();
    .amap-info-close{
        display: none;
    }
    .amap-info-content{
        padding: 0;
    }
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
Overlay\index.js
$$wangct-filePath-end$$

$$wangct-content-start$$
import React,{PureComponent} from 'react';
import util,{arrayUtil,objectUtil} from '@alipay/wangct-util';
import {getMap} from '../util';
import {getFormatFieldsByTarget} from '../config/formatFields';

export default class Overlay extends PureComponent{
  state = {
    data:[]
  };

  getRealState(){
    return {
      ...this.state,
      ...this.props
    }
  }

  list = [];

  onEnd = () => {
    const {list} = this;
    util.callFunc(this.getRealState().onEnd,list.slice(0,list.length - 1));
  };

  getData(){
    const {data} = this.getRealState();
    const result = Array.isArray(data) ? data : [data];
    result.push({
      id:util.random(),
      type:'Marker',
      events:{
        created:this.onEnd
      },
      visible:false
    });
    return result;
  }

  addItem(target){
    this.list.push(target);
  }

  removeItem(target){
    const {list} = this;
    const index = list.findIndex((item) => item === target);
    if(index !== -1){
      list.splice(index,1);
    }
  }

  events = {
    created:(target) => {
      this.addItem(target);
    },
    remove:(target) => {
      this.removeItem(target);
    }
  };

  render(){
    const state = this.getRealState();
    return <React.Fragment >
      {
        this.getData().map(item => {
          return <OverlayItem key={item.id} {...objectUtil.clone(state,['map','events'])} {...item} groupEvents={this.events} />
        })
      }
    </React.Fragment>
  }
}


class OverlayItem extends PureComponent{
  state = {
    filterFields:['filterFields','formatFields','replaceFields','overlayType'],
    replaceFields:{
      overlayType:'type'
    }
  };

  componentDidMount(){
    this.update();
  }

  componentDidUpdate(){
    this.update();
  }

  componentWillUnmount(){
    this.remove();
  }

  getRealState(){
    return {
      ...this.state,
      ...this.props
    }
  }

  getOption(){
    const state = this.getRealState();
    const {filterFields = [],replaceFields = {}} = state;
    if(state.overlayType){
      state.type = state.overlayType;
    }
    const formatFields = getFormatFieldsByTarget(this);
    Object.keys(state).forEach(key => {
      if(formatFields[key]){
        state[key] = formatFields[key](state[key],state);
      }
      if(replaceFields[key]){
        state[replaceFields[key]] = state[key];
      }
    });
    filterFields.forEach(field => {
      delete state[field];
    });
    return state;
  }

  remove(){
    const {map,events = {},groupEvents = {}} = this.getRealState();
    const {target} = this;
    if(map && target){
      util.callFunc(events.remove,target);
      util.callFunc(groupEvents.remove,target);
      map.remove(target);
    }
  }

  update(){
    this.remove();
    const {map,groupEvents = {}} = this.getRealState();
    if(map){
      const Map = getMap();
      const {type} = this.getRealState();
      const target = new Map[type](this.getOption());
      this.addEvents(target,groupEvents);
      this.addEvents(target);
      this.target = target;
    }
  }

  addEvents(target,events){
    events = events || this.getRealState().events || {};
    Object.keys(events).forEach(key => target.on(key,events[key]));
    util.callFunc(events.created,target);
  }

  render(){
    return <React.Fragment />
  }
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
style\base.less
$$wangct-filePath-end$$

$$wangct-content-start$$


.full-width(){
  width:100%;
}

.full-height(){
  height:100%;
}

.full(){
  .full-width();
  .full-height();
}

.flexCenter(){
  display: flex;
  align-items:center;
  justify-content: center;
}
$$wangct-content-end$$

$$wangct-container-end$$

$$wangct-container-start$$

$$wangct-filePath-start$$
util.js
$$wangct-filePath-end$$

$$wangct-content-start$$
/**
 * Created by wb-wct427481 on 2018/12/25.
 */

import util,{stringUtil} from '@alipay/wangct-util';
import config from './config/config';

export function loadMap(opt,cb){
  if(util.isFunction(opt)){
    cb = opt;
    opt = {
      version:config.version,
      key:config.key
    }
  }

  const {AMap} = window;
  if(AMap && AMap.v === opt.version && AMap.User.key === opt.key){
    cb(AMap);
  }else{
    window.AMap = null;
    util.loadScript('https://webapi.amap.com/maps?' + stringUtil.stringify({v:opt.version, key:opt.key}),() => {
      const timer = setInterval(() => {
        if(window.AMap){
          clearInterval(timer);
          util.callFunc(cb,window.AMap);
        }
      },30);
    });
  }
}

export function getMap(){
  return window.AMap;
}

$$wangct-content-end$$

$$wangct-container-end$$
